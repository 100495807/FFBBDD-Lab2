CREATE OR REPLACE PACKAGE caffeine AS
    -- Procedimiento para convertir borradores de pedidos en pedidos confirmados
    PROCEDURE Set_Replacement_Orders;
    PROCEDURE Informe_Proveedor(CIF IN CHAR);
END caffeine;
/

CREATE OR REPLACE PACKAGE BODY caffeine AS
    -- Procedimiento para convertir borradores de pedidos en pedidos confirmados
    PROCEDURE Set_Replacement_Orders IS
    BEGIN
        -- Actualizar el estado de los pedidos borradores a pedidos confirmados
        UPDATE Replacements
        SET status = 'P' -- 'P'  representa el estado de "confirmado"
        WHERE status = 'D'; -- 'D' representa el estado de "borrador";

    EXCEPTION
        WHEN no_data_found THEN 
            dbms_output.put_line('No hay datos');
    END Set_Replacement_Orders;

    PROCEDURE Informe_Proveedor(CIF IN CHAR) IS
        confirmados NUMBER;
        avg_delivery_time NUMBER;
        coste_actual NUMBER;
        diferencia_costes NUMBER;

    BEGIN
        -- Calcular el número de pedidos confirmados en el último año para el proveedor especificado
        SELECT COUNT(*)
        INTO confirmados
        FROM Replacements
        WHERE taxID = CIF
        AND status = 'P'
        AND orderdate > SYSDATE - 365;

        -- Mostrar el número de pedidos confirmados
        dbms_output.put_line('Numero de pedidos confirmados en el ultimo anio: ' || confirmados);

        -- Calcular el promedio del tiempo de entrega para los pedidos confirmados
        SELECT AVG(deldate - orderdate)
        INTO avg_delivery_time
        FROM Replacements
        WHERE taxID = CIF
        AND status = 'P'
        AND deldate IS NOT NULL
        AND orderdate > SYSDATE - 365;

        -- Mostrar el promedio del tiempo de entrega
        dbms_output.put_line('Promedio del tiempo de entrega para pedidos confirmados: ' || avg_delivery_time || ' dias');

        -- Obtener el detalle de las ofertas del proveedor
        FOR oferta IN (SELECT barCode,
                               MAX(cost) AS costo_maximo,
                               MIN(cost) AS costo_minimo,
                               AVG(cost) AS costo_promedio
                        FROM Supply_Lines
                        WHERE taxID = CIF
                        GROUP BY barCode)

        LOOP
            -- Obtener el coste actual de la referencia
            BEGIN
                SELECT cost
                INTO coste_actual
                FROM Supply_Lines
                WHERE taxID = CIF
                AND barCode = oferta.barCode;

                -- Calcular la diferencia del coste actual menos el promedio de costes de todas las ofertas
                diferencia_costes := coste_actual - oferta.costo_promedio;

                -- Mostrar el detalle de la oferta
                dbms_output.put_line('Referencia: ' || oferta.barCode);
                dbms_output.put_line('Coste actual: ' || coste_actual);
                dbms_output.put_line('Coste mínimo durante el último año: ' || oferta.costo_minimo);
                dbms_output.put_line('Coste máximo durante el último año: ' || oferta.costo_maximo);
                dbms_output.put_line('Diferencia del coste actual menos el promedio de costes: ' || diferencia_costes);

                -- Mostrar la diferencia con respecto a la mejor oferta para el producto
                IF coste_actual = oferta.costo_minimo THEN
                    dbms_output.put_line('El coste actual es el mejor precio para este producto.');
                ELSE
                    dbms_output.put_line('Diferencia con respecto a la mejor oferta: ' || (coste_actual - oferta.costo_minimo));
                END IF;
            END;
        END LOOP;

    EXCEPTION
        WHEN no_data_found THEN 
            dbms_output.put_line('No hay datos para generar el informe.');
    END Informe_Proveedor;

END caffeine;
/

BEGIN
    caffeine.Informe_Proveedor('E19951722G');
END;
/