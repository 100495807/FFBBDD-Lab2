CREATE OR REPLACE PACKAGE caffeine AS
    -- Este paquete contiene procedimientos para gestionar pedidos y generar informes para proveedores.

    -- Procedimiento para convertir borradores de pedidos en pedidos confirmados
    PROCEDURE Set_Replacement_Orders;

    -- Procedimiento para generar un informe detallado para un proveedor específico
    PROCEDURE Informe_Proveedor(CIF IN CHAR);
END caffeine;
/

CREATE OR REPLACE PACKAGE BODY caffeine AS
    -- Procedimiento para convertir borradores de pedidos en pedidos confirmados
    PROCEDURE Set_Replacement_Orders IS
    BEGIN
        -- Actualizar el estado de los pedidos borradores a pedidos confirmados
        UPDATE Replacements
        SET status = 'P'
        WHERE status = 'D';

    EXCEPTION
        WHEN no_data_found THEN 
            dbms_output.put_line('No hay datos');
    END Set_Replacement_Orders;

    -- Procedimiento para generar un informe detallado para un proveedor específico
    PROCEDURE Informe_Proveedor(CIF IN CHAR) IS
        confirmados NUMBER;
        tiempo_medio_entrega NUMBER;
        coste_actual NUMBER;
        diferencia_costes NUMBER;
        verificar_proveedor NUMBER;

    BEGIN
        -- Comprobar si el proveedor existe
        SELECT COUNT(*) 
        INTO verificar_proveedor 
        FROM providers 
        WHERE taxID = CIF;

        IF verificar_proveedor = 0 THEN
            dbms_output.put_line('El proveedor con el taxID ' || CIF || ' no existe.');
            RETURN;
        END IF;

        -- Calcular el número de pedidos confirmados en el último año para el proveedor especificado
        SELECT COUNT(*)
        INTO confirmados
        FROM Replacements
        WHERE taxID = CIF
        AND status = 'P'
        AND orderdate > SYSDATE - 365;

        -- Mostrar el número de pedidos confirmados
        dbms_output.put_line('Numero de pedidos confirmados en el ultimo anio: ' || confirmados);

        -- Calcular el promedio del tiempo de entrega para los pedidos confirmados
        SELECT AVG(deldate - orderdate)
        INTO tiempo_medio_entrega
        FROM Replacements
        WHERE taxID = CIF
        AND status = 'P'
        AND deldate IS NOT NULL
        AND orderdate > SYSDATE - 365;

        -- Mostrar el promedio del tiempo de entrega
        dbms_output.put_line('Promedio del tiempo de entrega para pedidos confirmados: ' || tiempo_medio_entrega || ' dias');

        -- Obtener el detalle de las ofertas del proveedor
        FOR oferta IN (
                SELECT DISTINCT sl.barCode, sl.cost AS coste_actual,
                (SELECT MIN(r.payment/r.units) FROM replacements r WHERE r.barCode = sl.barcode and r.orderdate>SYSDATE-365) AS costo_minimo,
                (SELECT MAX(payment/units) FROM replacements r WHERE r.barCode = sl.barcode and r.orderdate>SYSDATE-365) AS costo_maximo,
                (SELECT AVG(cost) FROM Supply_Lines WHERE barcode= sl.barcode AND r.orderdate>SYSDATE-365) AS costo_promedio,
                sl.cost - (SELECT AVG(cost) FROM Supply_Lines WHERE barcode= sl.barcode AND r.orderdate>SYSDATE-365) AS diferencia_costo_promedio,
                (SELECT MIN(cost) FROM (SELECT cost FROM supply_lines WHERE barcode = sl.barCode AND r.orderdate>SYSDATE-365 ORDER BY cost
                ) WHERE ROWNUM > 1) AS segunda_mejor_oferta
            FROM supply_lines sl
            JOIN replacements r ON sl.taxID = r.taxID AND sl.barCode = r.barCode
            WHERE sl.taxID = CIF
            AND r.orderdate>SYSDATE-365)

        LOOP
            -- Mostrar el detalle de la oferta
            dbms_output.put_line('Referencia: ' || oferta.barCode);
            dbms_output.put_line('Coste actual: ' || oferta.coste_actual);
            dbms_output.put_line('Coste minimo durante el ultimo anio: ' || oferta.costo_minimo);
            dbms_output.put_line('Coste maximo durante el ultimo anio: ' || oferta.costo_maximo);
            dbms_output.put_line('Diferencia de coste actual menos el promedio de costes: ' || oferta.diferencia_costo_promedio);

            -- Mostrar la diferencia con respecto a la mejor oferta para el producto
            IF coste_actual = oferta.costo_minimo THEN
                dbms_output.put_line('El coste actual es el mejor. Difefrencia entre la primera y la segunda mejor oferta' || (oferta.coste_actual-oferta.segunda_mejor_oferta));
            ELSE
                dbms_output.put_line('Diferencia con respecto a la mejor oferta: ' || (oferta.coste_actual - oferta.costo_minimo));
            END IF;
            dbms_output.put_line('---------------------------');
        END LOOP;

    EXCEPTION
        WHEN no_data_found THEN 
            dbms_output.put_line('No hay datos para generar el informe.');
    END Informe_Proveedor;

END caffeine;
/
